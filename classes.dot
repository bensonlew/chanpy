digraph "classes" {
rankdir=BT
charset="utf-8"
"chan.py.Common.CEnum.AUTYPE" [color="black", fontcolor="black", label=<{AUTYPE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.BI_DIR" [color="black", fontcolor="black", label=<{BI_DIR|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.BI_TYPE" [color="black", fontcolor="black", label=<{BI_TYPE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Math.BOLL.BOLL_Metric" [color="black", fontcolor="black", label=<{BOLL_Metric|DOWN : float<br ALIGN="LEFT"/>MID<br ALIGN="LEFT"/>UP<br ALIGN="LEFT"/>theta : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.BSP_TYPE" [color="black", fontcolor="black", label=<{BSP_TYPE|name<br ALIGN="LEFT"/>|main_type(): BSP_MAIN_TYPE<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.BOLL.BollModel" [color="black", fontcolor="black", label=<{BollModel|N : int<br ALIGN="LEFT"/>arr : list<br ALIGN="LEFT"/>|add(value): BOLL_Metric<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.AnimatePlotDriver.CAnimateDriver" [color="black", fontcolor="black", label=<{CAnimateDriver|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.BuySellPoint.BSPointConfig.CBSPointConfig" [color="black", fontcolor="black", label=<{CBSPointConfig|b_conf<br ALIGN="LEFT"/>s_conf<br ALIGN="LEFT"/>|GetBSConfig(is_buy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.BuySellPoint.BS_Point.CBS_Point" [color="black", fontcolor="black", label=<{CBS_Point|bi : LINE_TYPE<br ALIGN="LEFT"/>features : CFeatures<br ALIGN="LEFT"/>is_buy<br ALIGN="LEFT"/>is_segbsp : bool<br ALIGN="LEFT"/>klu<br ALIGN="LEFT"/>relate_bsp1 : Optional['CBS_Point']<br ALIGN="LEFT"/>type : List[BSP_TYPE]<br ALIGN="LEFT"/>|add_another_bsp_prop(bs_type: BSP_TYPE, relate_bsp1)<br ALIGN="LEFT"/>add_feat(inp1: Union[str, Dict[str, float], Dict[str, Optional[float]], 'CFeatures'], inp2: Optional[float])<br ALIGN="LEFT"/>add_type(bs_type: BSP_TYPE)<br ALIGN="LEFT"/>init_common_feature()<br ALIGN="LEFT"/>type2str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CBS_Point_meta" [color="black", fontcolor="black", label=<{CBS_Point_meta|is_buy<br ALIGN="LEFT"/>is_seg<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|desc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.DataAPI.BaoStockAPI.CBaoStock" [color="black", fontcolor="black", label=<{CBaoStock|is_connect : NoneType<br ALIGN="LEFT"/>is_stock<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|SetBasciInfo()<br ALIGN="LEFT"/>do_close()<br ALIGN="LEFT"/>do_init()<br ALIGN="LEFT"/>get_kl_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CBi_meta" [color="black", fontcolor="black", label=<{CBi_meta|begin_x<br ALIGN="LEFT"/>begin_y<br ALIGN="LEFT"/>dir<br ALIGN="LEFT"/>end_x<br ALIGN="LEFT"/>end_y<br ALIGN="LEFT"/>id_sure<br ALIGN="LEFT"/>idx<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.DataAPI.ccxt.CCXT" [color="black", fontcolor="black", label=<{CCXT|is_connect : NoneType<br ALIGN="LEFT"/>|<I>SetBasciInfo</I>()<br ALIGN="LEFT"/>create_item_dict(data, column_name)<br ALIGN="LEFT"/><I>do_close</I>()<br ALIGN="LEFT"/><I>do_init</I>()<br ALIGN="LEFT"/>get_kl_data()<br ALIGN="LEFT"/>parse_time_column(inp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Chan.CChan" [color="black", fontcolor="black", label=<{CChan|autype : AUTYPE, QFQ<br ALIGN="LEFT"/>begin_time : NoneType, str<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>conf : CChanConfig, NoneType<br ALIGN="LEFT"/>data_src : BAO_STOCK, Union[DATA_SRC, str]<br ALIGN="LEFT"/>end_time : NoneType, str<br ALIGN="LEFT"/>g_kl_iter : defaultdict<br ALIGN="LEFT"/>kl_datas : Dict[KL_TYPE, CKLine_List], dict<br ALIGN="LEFT"/>kl_inconsistent_detail : defaultdict<br ALIGN="LEFT"/>kl_misalign_cnt : int<br ALIGN="LEFT"/>klu_cache : List[Optional[CKLine_Unit]]<br ALIGN="LEFT"/>klu_last_t<br ALIGN="LEFT"/>lv_list : NoneType, Optional[List[KL_TYPE]], list<br ALIGN="LEFT"/>|GetStockAPI()<br ALIGN="LEFT"/>add_lv_iter(lv_idx, iter)<br ALIGN="LEFT"/>add_new_kl(cur_lv: KL_TYPE, kline_unit)<br ALIGN="LEFT"/>check_kl_align(kline_unit, lv_idx)<br ALIGN="LEFT"/>check_kl_consitent(parent_klu, sub_klu)<br ALIGN="LEFT"/>do_init()<br ALIGN="LEFT"/>get_bsp(idx): List[CBS_Point]<br ALIGN="LEFT"/>get_load_stock_iter(stockapi_cls, lv)<br ALIGN="LEFT"/>get_next_lv_klu(lv_idx)<br ALIGN="LEFT"/>init_lv_klu_iter(stockapi_cls)<br ALIGN="LEFT"/>load(step)<br ALIGN="LEFT"/>load_iterator(lv_idx, parent_klu, step)<br ALIGN="LEFT"/>load_stock_data(stockapi_instance: CCommonStockApi, lv): Iterable[CKLine_Unit]<br ALIGN="LEFT"/>set_klu_parent_relation(parent_klu, kline_unit, cur_lv, lv_idx)<br ALIGN="LEFT"/>step_load()<br ALIGN="LEFT"/>trigger_load(inp)<br ALIGN="LEFT"/>try_set_klu_idx(lv_idx: int, kline_unit: CKLine_Unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.ChanConfig.CChanConfig" [color="black", fontcolor="black", label=<{CChanConfig|auto_skip_illegal_sub_lv<br ALIGN="LEFT"/>bi_conf : CBiConfig<br ALIGN="LEFT"/>boll_n<br ALIGN="LEFT"/>bs_point_conf : CBSPointConfig<br ALIGN="LEFT"/>cal_demark<br ALIGN="LEFT"/>cal_kdj<br ALIGN="LEFT"/>cal_rsi<br ALIGN="LEFT"/>demark_config<br ALIGN="LEFT"/>kdj_cycle<br ALIGN="LEFT"/>kl_data_check<br ALIGN="LEFT"/>macd_config<br ALIGN="LEFT"/>max_kl_inconsistent_cnt<br ALIGN="LEFT"/>max_kl_misalgin_cnt<br ALIGN="LEFT"/>mean_metrics : List[int]<br ALIGN="LEFT"/>print_err_time<br ALIGN="LEFT"/>print_warning<br ALIGN="LEFT"/>rsi_cycle<br ALIGN="LEFT"/>seg_bs_point_conf : CBSPointConfig<br ALIGN="LEFT"/>seg_conf : CSegConfig<br ALIGN="LEFT"/>skip_step<br ALIGN="LEFT"/>trend_metrics : List[int]<br ALIGN="LEFT"/>trigger_step<br ALIGN="LEFT"/>zs_conf : CZSConfig<br ALIGN="LEFT"/>|GetMetricModel()<br ALIGN="LEFT"/>set_bsp_config(conf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Common.ChanException.CChanException" [color="black", fontcolor="red", label=<{CChanException|errcode : COMMON_ERROR<br ALIGN="LEFT"/>msg<br ALIGN="LEFT"/>|is_chan_err()<br ALIGN="LEFT"/>is_kldata_err()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CChanPlotMeta" [color="black", fontcolor="black", label=<{CChanPlotMeta|bi_list<br ALIGN="LEFT"/>bs_point_lst : List[CBS_Point_meta]<br ALIGN="LEFT"/>data : CKLine_List<br ALIGN="LEFT"/>datetick<br ALIGN="LEFT"/>eigenfx_lst : List[CEigenFX_meta]<br ALIGN="LEFT"/>klc_list : List[Cklc_meta]<br ALIGN="LEFT"/>klu_len<br ALIGN="LEFT"/>seg_bsp_lst : List[CBS_Point_meta]<br ALIGN="LEFT"/>seg_list : List[CSeg_meta]<br ALIGN="LEFT"/>segseg_list : List[CSeg_meta]<br ALIGN="LEFT"/>segzs_lst : List[CZS_meta]<br ALIGN="LEFT"/>zs_lst : List[CZS_meta]<br ALIGN="LEFT"/>|klu_iter()<br ALIGN="LEFT"/>sub_last_kbi_start_idx(bi_cnt)<br ALIGN="LEFT"/>sub_last_kseg_start_idx(seg_cnt)<br ALIGN="LEFT"/>sub_range_start_idx(x_range)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Combiner.Combine_Item.CCombine_Item" [color="black", fontcolor="black", label=<{CCombine_Item|high<br ALIGN="LEFT"/>low<br ALIGN="LEFT"/>time_begin<br ALIGN="LEFT"/>time_end<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.DataAPI.CommonStockAPI.CCommonStockApi" [color="black", fontcolor="black", label=<{CCommonStockApi|autype<br ALIGN="LEFT"/>begin_date<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>end_date<br ALIGN="LEFT"/>is_stock : NoneType<br ALIGN="LEFT"/>k_type<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|<I>SetBasciInfo</I>()<br ALIGN="LEFT"/><I>do_close</I>()<br ALIGN="LEFT"/><I>do_init</I>()<br ALIGN="LEFT"/><I>get_kl_data</I>(): Iterable[CKLine_Unit]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.Demark.CDemarkCountdown" [color="black", fontcolor="black", label=<{CDemarkCountdown|TDST_peak : float<br ALIGN="LEFT"/>dir : BI_DIR<br ALIGN="LEFT"/>finish : bool<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>kl_list : List[C_KL]<br ALIGN="LEFT"/>|update(kl: C_KL): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.Demark.CDemarkEngine" [color="black", fontcolor="black", label=<{CDemarkEngine|kl_lst : List[C_KL]<br ALIGN="LEFT"/>series : List[CDemarkSetup]<br ALIGN="LEFT"/>|cal_result(): CDemarkIndex<br ALIGN="LEFT"/>clean_series_from_setup_finish()<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>update(idx: int, close: float, high: float, low: float): CDemarkIndex<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.Demark.CDemarkIndex" [color="black", fontcolor="black", label=<{CDemarkIndex|data : List[T_DEMARK_INDEX]<br ALIGN="LEFT"/>|add(_dir: BI_DIR, _type: T_DEMARK_TYPE, idx: int, series: 'CDemarkSetup')<br ALIGN="LEFT"/>get_countdown(): List[T_DEMARK_INDEX]<br ALIGN="LEFT"/>get_setup(): List[T_DEMARK_INDEX]<br ALIGN="LEFT"/>update(demark_index: 'CDemarkIndex')<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.Demark.CDemarkSetup" [color="black", fontcolor="black", label=<{CDemarkSetup|TDST_peak : Optional[float]<br ALIGN="LEFT"/>countdown : Optional[CDemarkCountdown]<br ALIGN="LEFT"/>dir : BI_DIR<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>kl_list : List[C_KL]<br ALIGN="LEFT"/>last_demark_index<br ALIGN="LEFT"/>pre_kl<br ALIGN="LEFT"/>setup_finished : bool<br ALIGN="LEFT"/>|add_setup()<br ALIGN="LEFT"/>cal_TDST_peak(): float<br ALIGN="LEFT"/>update(kl: C_KL): CDemarkIndex<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Seg.Eigen.CEigen" [color="black", fontcolor="black", label=<{CEigen|gap : bool<br ALIGN="LEFT"/>|GetPeakBiIdx()<br ALIGN="LEFT"/>update_fx(_pre: 'CEigen', _next: 'CEigen', exclude_included, allow_top_equal)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Seg.EigenFX.CEigenFX" [color="black", fontcolor="black", label=<{CEigenFX|dir : BI_DIR<br ALIGN="LEFT"/>ele : List[Optional[CEigen]], list<br ALIGN="LEFT"/>exclude_included : bool<br ALIGN="LEFT"/>kl_dir : DOWN, UP<br ALIGN="LEFT"/>last_evidence_bi : Optional[CBi]<br ALIGN="LEFT"/>lst : List[CBi], list<br ALIGN="LEFT"/>lv : BI<br ALIGN="LEFT"/>|GetPeakBiIdx()<br ALIGN="LEFT"/>actual_break()<br ALIGN="LEFT"/>add(bi: CBi): bool<br ALIGN="LEFT"/>all_bi_is_sure()<br ALIGN="LEFT"/>can_be_end(bi_lst: CBiList)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>find_revert_fx(bi_list: CBiList, begin_idx: int, thred_value: float, break_thred: float)<br ALIGN="LEFT"/>is_down()<br ALIGN="LEFT"/>is_up()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>treat_first_ele(bi: CBi): bool<br ALIGN="LEFT"/>treat_second_ele(bi: CBi): bool<br ALIGN="LEFT"/>treat_third_ele(bi: CBi): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CEigenFX_meta" [color="black", fontcolor="black", label=<{CEigenFX_meta|ele<br ALIGN="LEFT"/>fx<br ALIGN="LEFT"/>gap<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CEigen_meta" [color="black", fontcolor="black", label=<{CEigen_meta|begin_x<br ALIGN="LEFT"/>begin_y<br ALIGN="LEFT"/>end_x<br ALIGN="LEFT"/>end_y<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>w<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.KLine.KLine.CKLine" [color="black", fontcolor="black", label=<{CKLine|idx : int<br ALIGN="LEFT"/>kl_type<br ALIGN="LEFT"/>|GetSubKLC()<br ALIGN="LEFT"/>check_fx_valid(item2: 'CKLine', method, for_virtual)<br ALIGN="LEFT"/>get_klu_max_high(): float<br ALIGN="LEFT"/>get_klu_min_low(): float<br ALIGN="LEFT"/>has_gap_with_next(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Combiner.KLine_Combiner.CKLine_Combiner" [color="black", fontcolor="black", label=<{CKLine_Combiner|dir<br ALIGN="LEFT"/>fx<br ALIGN="LEFT"/>high<br ALIGN="LEFT"/>low<br ALIGN="LEFT"/>lst<br ALIGN="LEFT"/>next<br ALIGN="LEFT"/>pre<br ALIGN="LEFT"/>time_begin<br ALIGN="LEFT"/>time_end<br ALIGN="LEFT"/>|add(unit_kl: T)<br ALIGN="LEFT"/>clean_cache()<br ALIGN="LEFT"/>get_high_peak_klu(): T<br ALIGN="LEFT"/>get_low_peak_klu(): T<br ALIGN="LEFT"/>get_next(): Self<br ALIGN="LEFT"/>get_peak_klu(is_high): T<br ALIGN="LEFT"/>set_fx(fx: FX_TYPE)<br ALIGN="LEFT"/>set_next(_next: Self)<br ALIGN="LEFT"/>set_pre(_pre: Self)<br ALIGN="LEFT"/>test_combine(item: CCombine_Item, exclude_included, allow_top_equal)<br ALIGN="LEFT"/>try_add(unit_kl: T, exclude_included, allow_top_equal)<br ALIGN="LEFT"/>update_fx(_pre: Self, _next: Self, exclude_included, allow_top_equal)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.KLine.KLine_List.CKLine_List" [color="black", fontcolor="black", label=<{CKLine_List|bi_list : CBiList<br ALIGN="LEFT"/>bs_point_lst<br ALIGN="LEFT"/>config : CChanConfig<br ALIGN="LEFT"/>kl_type<br ALIGN="LEFT"/>lst : List[CKLine]<br ALIGN="LEFT"/>metric_model_lst<br ALIGN="LEFT"/>seg_bs_point_lst<br ALIGN="LEFT"/>seg_list : CSegListChan, CSegListComm[CBi], CSegListDYH, CSegListDef<br ALIGN="LEFT"/>segseg_list : CSegListChan, CSegListComm[CSeg[CBi]], CSegListDYH, CSegListDef<br ALIGN="LEFT"/>segzs_list : CZSList<br ALIGN="LEFT"/>step_calculation<br ALIGN="LEFT"/>zs_list : CZSList<br ALIGN="LEFT"/>|add_single_klu(klu: CKLine_Unit)<br ALIGN="LEFT"/>cal_seg_and_zs()<br ALIGN="LEFT"/>klu_iter(klc_begin_idx)<br ALIGN="LEFT"/>need_cal_step_by_step()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.KLine.KLine_Unit.CKLine_Unit" [color="black", fontcolor="black", label=<{CKLine_Unit|boll : BOLL_Metric<br ALIGN="LEFT"/>close<br ALIGN="LEFT"/>demark : CDemarkIndex<br ALIGN="LEFT"/>high<br ALIGN="LEFT"/>idx<br ALIGN="LEFT"/>kdj<br ALIGN="LEFT"/>kl_type : NoneType<br ALIGN="LEFT"/>klc<br ALIGN="LEFT"/>limit_flag : int<br ALIGN="LEFT"/>low<br ALIGN="LEFT"/>macd : CMACD_item<br ALIGN="LEFT"/>open<br ALIGN="LEFT"/>rsi<br ALIGN="LEFT"/>sub_kl_list : list<br ALIGN="LEFT"/>sup_kl : Optional[CKLine_Unit], str<br ALIGN="LEFT"/>time : CTime<br ALIGN="LEFT"/>trade_info<br ALIGN="LEFT"/>trend : Dict[TREND_TYPE, Dict[int, float]], dict<br ALIGN="LEFT"/>|add_children(child)<br ALIGN="LEFT"/>check(autofix)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_parent_klc()<br ALIGN="LEFT"/>include_sub_lv_time(sub_lv_t: str): bool<br ALIGN="LEFT"/>set_idx(idx)<br ALIGN="LEFT"/>set_klc(klc)<br ALIGN="LEFT"/>set_metric(metric_model_lst: list): None<br ALIGN="LEFT"/>set_parent(parent: 'CKLine_Unit')<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.MACD.CMACD" [color="black", fontcolor="black", label=<{CMACD|fastperiod : int<br ALIGN="LEFT"/>macd_info : List[CMACD_item]<br ALIGN="LEFT"/>signalperiod : int<br ALIGN="LEFT"/>slowperiod : int<br ALIGN="LEFT"/>|add(value): CMACD_item<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.MACD.CMACD_item" [color="black", fontcolor="black", label=<{CMACD_item|DEA<br ALIGN="LEFT"/>DIF<br ALIGN="LEFT"/>fast_ema<br ALIGN="LEFT"/>macd<br ALIGN="LEFT"/>slow_ema<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Plot.PlotDriver.CPlotDriver" [color="black", fontcolor="black", label=<{CPlotDriver|figure : NoneType<br ALIGN="LEFT"/>lv_lst<br ALIGN="LEFT"/>y_max : float<br ALIGN="LEFT"/>y_min : float<br ALIGN="LEFT"/>|DrawElement(plot_config: Dict[str, bool], meta: CChanPlotMeta, ax: Axes, lv, plot_para, ax_macd: Optional[Axes], x_limits)<br ALIGN="LEFT"/>GetRealXrange(figure_config, meta: CChanPlotMeta)<br ALIGN="LEFT"/>ShowDrawFuncHelper()<br ALIGN="LEFT"/>bsp_common_draw(bsp_list, ax: Axes, buy_color, sell_color, fontsize, arrow_l, arrow_h, arrow_w)<br ALIGN="LEFT"/>draw_bi(meta: CChanPlotMeta, ax: Axes, lv, color, show_num, num_fontsize, num_color, sub_lv_cnt, facecolor, alpha, disp_end, end_color, end_fontsize)<br ALIGN="LEFT"/>draw_boll(meta: CChanPlotMeta, ax: Axes, mid_color, up_color, down_color)<br ALIGN="LEFT"/>draw_bs_point(meta: CChanPlotMeta, ax: Axes, buy_color, sell_color, fontsize, arrow_l, arrow_h, arrow_w)<br ALIGN="LEFT"/>draw_channel(meta: CChanPlotMeta, ax: Axes, T, top_color, bottom_color, linewidth, linestyle)<br ALIGN="LEFT"/>draw_demark(meta: CChanPlotMeta, ax: Axes, setup_color, countdown_color, fontsize, min_setup, max_countdown_background, begin_line_color: Optional[str], begin_line_style)<br ALIGN="LEFT"/>draw_demark_begin_line(ax, begin_line_color, plot_begin_set: set, linestyle: str, demark_idx: T_DEMARK_INDEX)<br ALIGN="LEFT"/>draw_eigen(meta: CChanPlotMeta, ax: Axes, color_top, color_bottom, aplha, only_peak)<br ALIGN="LEFT"/>draw_kdj(meta: CChanPlotMeta, ax, k_color, d_color, j_color)<br ALIGN="LEFT"/>draw_klc(meta: CChanPlotMeta, ax: Axes, width, plot_single_kl)<br ALIGN="LEFT"/>draw_klu(meta: CChanPlotMeta, ax: Axes, width, rugd, plot_mode)<br ALIGN="LEFT"/>draw_macd(meta: CChanPlotMeta, ax: Axes, x_limits, width)<br ALIGN="LEFT"/>draw_marker(meta: CChanPlotMeta, ax: Axes, markers: Dict[CTime | str, Tuple[str, Literal['up', 'down'], str] | Tuple[str, Literal['up', 'down']]], arrow_l, arrow_h_r, arrow_w, fontsize, default_color)<br ALIGN="LEFT"/>draw_mean(meta: CChanPlotMeta, ax: Axes)<br ALIGN="LEFT"/>draw_rsi(meta: CChanPlotMeta, ax, color)<br ALIGN="LEFT"/>draw_seg(meta: CChanPlotMeta, ax: Axes, lv, width, color, sub_lv_cnt, facecolor, alpha, disp_end, end_color, end_fontsize, plot_trendline, trendline_color, trendline_width)<br ALIGN="LEFT"/>draw_seg_bs_point(meta: CChanPlotMeta, ax: Axes, buy_color, sell_color, fontsize, arrow_l, arrow_h, arrow_w)<br ALIGN="LEFT"/>draw_segseg(meta: CChanPlotMeta, ax: Axes, width, color, disp_end, end_color, end_fontsize)<br ALIGN="LEFT"/>draw_segzs(meta: CChanPlotMeta, ax: Axes, color, linewidth, sub_linewidth)<br ALIGN="LEFT"/>draw_zs(meta: CChanPlotMeta, ax: Axes, color, linewidth, sub_linewidth, show_text, fontsize, text_color, draw_one_bi_zs)<br ALIGN="LEFT"/>plot_closeAction(plot_cover, cbsp, ax: Axes, text_y, arrow_len, arrow_dir, color)<br ALIGN="LEFT"/>save2img(path)<br ALIGN="LEFT"/>update_y_range(text_box, text_y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.BuySellPoint.BSPointConfig.CPointConfig" [color="black", fontcolor="black", label=<{CPointConfig|bs1_peak<br ALIGN="LEFT"/>bsp1_only_multibi_zs<br ALIGN="LEFT"/>bsp2_follow_1<br ALIGN="LEFT"/>bsp2s_follow_2<br ALIGN="LEFT"/>bsp3_follow_1<br ALIGN="LEFT"/>bsp3_peak<br ALIGN="LEFT"/>divergence_rate<br ALIGN="LEFT"/>macd_algo<br ALIGN="LEFT"/>max_bs2_rate<br ALIGN="LEFT"/>max_bsp2s_lv : Optional[int]<br ALIGN="LEFT"/>min_zs_cnt<br ALIGN="LEFT"/>strict_bsp3<br ALIGN="LEFT"/>target_types : List[BSP_TYPE]<br ALIGN="LEFT"/>tmp_target_types<br ALIGN="LEFT"/>|SetMacdAlgo(macd_algo)<br ALIGN="LEFT"/>parse_target_type()<br ALIGN="LEFT"/>set(k, v)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.DataAPI.csvAPI.CSV_API" [color="black", fontcolor="black", label=<{CSV_API|columns : list<br ALIGN="LEFT"/>headers_exist : bool<br ALIGN="LEFT"/>time_column_idx<br ALIGN="LEFT"/>|<I>SetBasciInfo</I>()<br ALIGN="LEFT"/><I>do_close</I>()<br ALIGN="LEFT"/><I>do_init</I>()<br ALIGN="LEFT"/>get_kl_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Seg.Seg.CSeg" [color="black", fontcolor="black", label=<{CSeg|bi_list : List[LINE_TYPE]<br ALIGN="LEFT"/>bsp : Optional[CBS_Point]<br ALIGN="LEFT"/>dir : NoneType<br ALIGN="LEFT"/>eigen_fx : Optional[CEigenFX]<br ALIGN="LEFT"/>ele_inside_is_sure : bool<br ALIGN="LEFT"/>end_bi : LINE_TYPE<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>is_sure : bool<br ALIGN="LEFT"/>next : Optional[Self]<br ALIGN="LEFT"/>parent_seg : Optional[CSeg]<br ALIGN="LEFT"/>pre : Optional[Self]<br ALIGN="LEFT"/>reason : str<br ALIGN="LEFT"/>resistance_trend_line : CTrendLine, NoneType<br ALIGN="LEFT"/>seg_idx : NoneType<br ALIGN="LEFT"/>start_bi : LINE_TYPE<br ALIGN="LEFT"/>support_trend_line : CTrendLine, NoneType<br ALIGN="LEFT"/>zs_lst : List[CZS[LINE_TYPE]], list<br ALIGN="LEFT"/>|Cal_MACD_amp()<br ALIGN="LEFT"/>Cal_MACD_slope()<br ALIGN="LEFT"/>add_zs(zs)<br ALIGN="LEFT"/>amp()<br ALIGN="LEFT"/>cal_amp()<br ALIGN="LEFT"/>cal_bi_cnt()<br ALIGN="LEFT"/>cal_klu_slope()<br ALIGN="LEFT"/>cal_macd_metric(macd_algo, is_reverse)<br ALIGN="LEFT"/>check()<br ALIGN="LEFT"/>clear_zs_lst()<br ALIGN="LEFT"/>get_begin_klu(): CKLine_Unit<br ALIGN="LEFT"/>get_begin_val()<br ALIGN="LEFT"/>get_end_klu(): CKLine_Unit<br ALIGN="LEFT"/>get_end_val()<br ALIGN="LEFT"/>get_final_multi_bi_zs()<br ALIGN="LEFT"/>get_first_multi_bi_zs()<br ALIGN="LEFT"/>get_klu_cnt()<br ALIGN="LEFT"/>get_multi_bi_zs_cnt()<br ALIGN="LEFT"/>is_down()<br ALIGN="LEFT"/>is_up()<br ALIGN="LEFT"/>set_seg_idx(idx)<br ALIGN="LEFT"/>update_bi_list(bi_lst, idx1, idx2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Seg.SegConfig.CSegConfig" [color="black", fontcolor="black", label=<{CSegConfig|left_method : ALL, PEAK<br ALIGN="LEFT"/>seg_algo : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Seg.SegListChan.CSegListChan" [color="black", fontcolor="black", label=<{CSegListChan|<br ALIGN="LEFT"/>|cal_seg_sure(bi_lst: CBiList, begin_idx: int)<br ALIGN="LEFT"/>do_init()<br ALIGN="LEFT"/>treat_fx_eigen(fx_eigen, bi_lst: CBiList)<br ALIGN="LEFT"/>update(bi_lst: CBiList)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Seg.SegListDYH.CSegListDYH" [color="black", fontcolor="black", label=<{CSegListDYH|sure_seg_update_end : bool<br ALIGN="LEFT"/>|cal_bi_sure(bi_lst)<br ALIGN="LEFT"/>cal_bi_unsure(bi_lst: CBiList)<br ALIGN="LEFT"/>try_update_last_seg(bi_lst: CBiList)<br ALIGN="LEFT"/>update(bi_lst: CBiList)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Seg.SegListDef.CSegListDef" [color="black", fontcolor="black", label=<{CSegListDef|sure_seg_update_end : bool<br ALIGN="LEFT"/>|cal_bi_sure(bi_lst)<br ALIGN="LEFT"/>update(bi_lst: CBiList)<br ALIGN="LEFT"/>update_last_end(bi_lst, new_endbi_idx: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CSeg_meta" [color="black", fontcolor="black", label=<{CSeg_meta|begin_x<br ALIGN="LEFT"/>begin_y<br ALIGN="LEFT"/>dir<br ALIGN="LEFT"/>end_x<br ALIGN="LEFT"/>end_y<br ALIGN="LEFT"/>is_sure<br ALIGN="LEFT"/>tl : dict<br ALIGN="LEFT"/>|format_tl(tl)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Common.CTime.CTime" [color="black", fontcolor="black", label=<{CTime|auto : bool<br ALIGN="LEFT"/>day<br ALIGN="LEFT"/>hour<br ALIGN="LEFT"/>minute<br ALIGN="LEFT"/>month<br ALIGN="LEFT"/>second : int<br ALIGN="LEFT"/>ts<br ALIGN="LEFT"/>year<br ALIGN="LEFT"/>|set_timestamp()<br ALIGN="LEFT"/>toDate()<br ALIGN="LEFT"/>toDateStr(splt)<br ALIGN="LEFT"/>to_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.KLine.TradeInfo.CTradeInfo" [color="black", fontcolor="black", label=<{CTradeInfo|metric : Dict[str, Optional[float]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Math.TrendLine.CTrendLine" [color="black", fontcolor="black", label=<{CTrendLine|line : NoneType<br ALIGN="LEFT"/>side : OUTSIDE<br ALIGN="LEFT"/>|cal(lst)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.TrendModel.CTrendModel" [color="black", fontcolor="black", label=<{CTrendModel|T : int<br ALIGN="LEFT"/>arr : list<br ALIGN="LEFT"/>type : TREND_TYPE<br ALIGN="LEFT"/>|add(value): float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.ZS.ZSConfig.CZSConfig" [color="black", fontcolor="black", label=<{CZSConfig|need_combine : bool<br ALIGN="LEFT"/>one_bi_zs : bool<br ALIGN="LEFT"/>zs_algo : str<br ALIGN="LEFT"/>zs_combine_mode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.ZS.ZSList.CZSList" [color="black", fontcolor="black", label=<{CZSList|config : CZSConfig<br ALIGN="LEFT"/>free_item_lst : list<br ALIGN="LEFT"/>last_sure_pos : int<br ALIGN="LEFT"/>zs_lst : List[CZS], list<br ALIGN="LEFT"/>|add_to_free_lst(item, is_sure, zs_algo)<br ALIGN="LEFT"/>add_zs_from_bi_range(seg_bi_lst: list, seg_dir, seg_is_sure)<br ALIGN="LEFT"/>cal_bi_zs(bi_lst: Union[CBiList, CSegListComm], seg_lst: CSegListComm)<br ALIGN="LEFT"/>clear_free_lst()<br ALIGN="LEFT"/>seg_need_cal(seg: CSeg)<br ALIGN="LEFT"/>try_add_to_end(bi)<br ALIGN="LEFT"/>try_combine()<br ALIGN="LEFT"/>try_construct_zs(lst, is_sure, zs_algo)<br ALIGN="LEFT"/>update(bi: CBi, is_sure)<br ALIGN="LEFT"/>update_last_pos(seg_list: CSegListComm)<br ALIGN="LEFT"/>update_overseg_zs(bi: CBi | CSeg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.CZS_meta" [color="black", fontcolor="black", label=<{CZS_meta|begin<br ALIGN="LEFT"/>end<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>high<br ALIGN="LEFT"/>is_onebi_zs<br ALIGN="LEFT"/>is_sure<br ALIGN="LEFT"/>low<br ALIGN="LEFT"/>sub_zs_lst<br ALIGN="LEFT"/>w<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Math.Demark.C_KL" [color="black", fontcolor="black", label=<{C_KL|close : float<br ALIGN="LEFT"/>high : float<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>low : float<br ALIGN="LEFT"/>|v(is_close: bool, _dir: BI_DIR): float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Plot.PlotMeta.Cklc_meta" [color="black", fontcolor="black", label=<{Cklc_meta|begin_idx<br ALIGN="LEFT"/>end_idx<br ALIGN="LEFT"/>high<br ALIGN="LEFT"/>klu_list : list<br ALIGN="LEFT"/>low<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.ChanConfig.ConfigWithCheck" [color="black", fontcolor="black", label=<{ConfigWithCheck|conf<br ALIGN="LEFT"/>|check()<br ALIGN="LEFT"/>get(k, default_value)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Common.CEnum.DATA_FIELD" [color="black", fontcolor="black", label=<{DATA_FIELD|FIELD_CLOSE : str<br ALIGN="LEFT"/>FIELD_HIGH : str<br ALIGN="LEFT"/>FIELD_LOW : str<br ALIGN="LEFT"/>FIELD_OPEN : str<br ALIGN="LEFT"/>FIELD_TIME : str<br ALIGN="LEFT"/>FIELD_TURNOVER : str<br ALIGN="LEFT"/>FIELD_TURNRATE : str<br ALIGN="LEFT"/>FIELD_VOLUME : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.DATA_SRC" [color="black", fontcolor="black", label=<{DATA_SRC|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.ChanException.ErrCode" [color="black", fontcolor="black", label=<{ErrCode|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.FX_CHECK_METHOD" [color="black", fontcolor="black", label=<{FX_CHECK_METHOD|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.FX_TYPE" [color="black", fontcolor="black", label=<{FX_TYPE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Math.KDJ.KDJ" [color="black", fontcolor="black", label=<{KDJ|arr : list<br ALIGN="LEFT"/>period : int<br ALIGN="LEFT"/>pre_kdj<br ALIGN="LEFT"/>|add(high, low, close): KDJ_Item<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.KDJ.KDJ_Item" [color="black", fontcolor="black", label=<{KDJ_Item|d<br ALIGN="LEFT"/>j<br ALIGN="LEFT"/>k<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.KLINE_DIR" [color="black", fontcolor="black", label=<{KLINE_DIR|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.KL_TYPE" [color="black", fontcolor="black", label=<{KL_TYPE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.LEFT_SEG_METHOD" [color="black", fontcolor="black", label=<{LEFT_SEG_METHOD|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Math.TrendLine.Line" [color="black", fontcolor="black", label=<{Line|p<br ALIGN="LEFT"/>slope : float<br ALIGN="LEFT"/>|cal_dis(p)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Common.CEnum.MACD_ALGO" [color="black", fontcolor="black", label=<{MACD_ALGO|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.DataAPI.parquetAPI.Parquet_API" [color="black", fontcolor="black", label=<{Parquet_API|columns : list<br ALIGN="LEFT"/>time_column_idx<br ALIGN="LEFT"/>|<I>SetBasciInfo</I>()<br ALIGN="LEFT"/><I>do_close</I>()<br ALIGN="LEFT"/><I>do_init</I>()<br ALIGN="LEFT"/>get_kl_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.TrendLine.Point" [color="black", fontcolor="black", label=<{Point|x : int<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>|cal_slope(p)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Math.RSI.RSI" [color="black", fontcolor="black", label=<{RSI|close_arr : list<br ALIGN="LEFT"/>diff : list<br ALIGN="LEFT"/>down : list<br ALIGN="LEFT"/>period : int<br ALIGN="LEFT"/>up : list<br ALIGN="LEFT"/>|add(close)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chan.py.Common.CEnum.SEG_TYPE" [color="black", fontcolor="black", label=<{SEG_TYPE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.TREND_LINE_SIDE" [color="black", fontcolor="black", label=<{TREND_LINE_SIDE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.CEnum.TREND_TYPE" [color="black", fontcolor="black", label=<{TREND_TYPE|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Math.Demark.T_DEMARK_INDEX" [color="black", fontcolor="black", label=<{T_DEMARK_INDEX|dir : BI_DIR<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>series : str<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.Common.cache.make_cache" [color="black", fontcolor="black", label=<{make_cache|func<br ALIGN="LEFT"/>func_key : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chan.py.DataAPI.BaoStockAPI.CBaoStock" -> "chan.py.DataAPI.CommonStockAPI.CCommonStockApi" [arrowhead="empty", arrowtail="none"];
"chan.py.DataAPI.ccxt.CCXT" -> "chan.py.DataAPI.CommonStockAPI.CCommonStockApi" [arrowhead="empty", arrowtail="none"];
"chan.py.DataAPI.csvAPI.CSV_API" -> "chan.py.DataAPI.CommonStockAPI.CCommonStockApi" [arrowhead="empty", arrowtail="none"];
"chan.py.DataAPI.parquetAPI.Parquet_API" -> "chan.py.DataAPI.CommonStockAPI.CCommonStockApi" [arrowhead="empty", arrowtail="none"];
"chan.py.BuySellPoint.BSPointConfig.CPointConfig" -> "chan.py.BuySellPoint.BSPointConfig.CBSPointConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b_conf", style="solid"];
"chan.py.BuySellPoint.BSPointConfig.CPointConfig" -> "chan.py.BuySellPoint.BSPointConfig.CBSPointConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s_conf", style="solid"];
"chan.py.KLine.TradeInfo.CTradeInfo" -> "chan.py.KLine.KLine_Unit.CKLine_Unit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="trade_info", style="solid"];
"chan.py.Math.Demark.CDemarkCountdown" -> "chan.py.Math.Demark.CDemarkSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="countdown", style="solid"];
"chan.py.Math.Demark.CDemarkIndex" -> "chan.py.Math.Demark.CDemarkSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="last_demark_index", style="solid"];
"chan.py.Math.Demark.CDemarkIndex" -> "chan.py.Math.Demark.CDemarkSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="last_demark_index", style="solid"];
"chan.py.Math.KDJ.KDJ_Item" -> "chan.py.Math.KDJ.KDJ" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pre_kdj", style="solid"];
"chan.py.Math.TrendLine.Point" -> "chan.py.Math.TrendLine.Line" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p", style="solid"];
"chan.py.Math.Demark.C_KL" -> "chan.py.Math.Demark.CDemarkSetup" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="pre_kl", style="solid"];
"chan.py.Math.KDJ.KDJ_Item" -> "chan.py.Math.KDJ.KDJ" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="pre_kdj", style="solid"];
"chan.py.Math.TrendLine.Line" -> "chan.py.Math.TrendLine.CTrendLine" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="line", style="solid"];
}
